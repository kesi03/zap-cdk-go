package zapcdk

import (
	_jsii_ "github.com/aws/jsii-runtime-go/runtime"
	_init_ "github.com/kesi03/zap-cdk-go/zapcdk/jsii"
)

// Class representing a report configuration.
//
// Example:
//   const reportConfig = new Report({
//     template: 'traditional-html',
//     theme: 'corporate',
//     reportDir: '/reports',
//     reportFile: '{{yyyy-MM-dd}}-ZAP-Report-[[site]]',
//     reportTitle: 'Weekly Security Report',
//     reportDescription: 'This is the weekly security report generated by ZAP.',
//     displayReport: true,
//     risks: ['high', 'medium'],
//     confidences: ['high', 'medium', 'low'],
//     sections: ['alertSummary', 'siteSummary', 'alertsByRisk'],
//     sites: ['https://example.com', 'https://another-example.com']
//   });
//
type Report interface {
	IReport
	Confidences() *[]*string
	SetConfidences(val *[]*string)
	DisplayReport() *bool
	SetDisplayReport(val *bool)
	ReportDescription() *string
	SetReportDescription(val *string)
	ReportDir() *string
	SetReportDir(val *string)
	ReportFile() *string
	SetReportFile(val *string)
	ReportTitle() *string
	SetReportTitle(val *string)
	Risks() *[]*string
	SetRisks(val *[]*string)
	Sections() *[]*string
	SetSections(val *[]*string)
	Sites() *[]*string
	SetSites(val *[]*string)
	Template() *string
	SetTemplate(val *string)
	Theme() *string
	SetTheme(val *string)
}

// The jsii proxy struct for Report
type jsiiProxy_Report struct {
	jsiiProxy_IReport
}

func (j *jsiiProxy_Report) Confidences() *[]*string {
	var returns *[]*string
	_jsii_.Get(
		j,
		"confidences",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_Report) DisplayReport() *bool {
	var returns *bool
	_jsii_.Get(
		j,
		"displayReport",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_Report) ReportDescription() *string {
	var returns *string
	_jsii_.Get(
		j,
		"reportDescription",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_Report) ReportDir() *string {
	var returns *string
	_jsii_.Get(
		j,
		"reportDir",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_Report) ReportFile() *string {
	var returns *string
	_jsii_.Get(
		j,
		"reportFile",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_Report) ReportTitle() *string {
	var returns *string
	_jsii_.Get(
		j,
		"reportTitle",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_Report) Risks() *[]*string {
	var returns *[]*string
	_jsii_.Get(
		j,
		"risks",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_Report) Sections() *[]*string {
	var returns *[]*string
	_jsii_.Get(
		j,
		"sections",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_Report) Sites() *[]*string {
	var returns *[]*string
	_jsii_.Get(
		j,
		"sites",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_Report) Template() *string {
	var returns *string
	_jsii_.Get(
		j,
		"template",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_Report) Theme() *string {
	var returns *string
	_jsii_.Get(
		j,
		"theme",
		&returns,
	)
	return returns
}


// Creates an instance of Report.
//
// Example:
//   const reportConfig = new Report({
//     template: 'traditional-html',
//     theme: 'corporate',
//     reportDir: '/reports',
//     reportFile: '{{yyyy-MM-dd}}-ZAP-Report-[[site]]',
//     reportTitle: 'Weekly Security Report',
//     reportDescription: 'This is the weekly security report generated by ZAP.',
//     displayReport: true,
//     risks: ['high', 'medium'],
//     confidences: ['high', 'medium', 'low'],
//     sections: ['alertSummary', 'siteSummary', 'alertsByRisk'],
//     sites: ['https://example.com', 'https://another-example.com']
//   });
//
func NewReport(options IReport) Report {
	_init_.Initialize()

	if err := validateNewReportParameters(options); err != nil {
		panic(err)
	}
	j := jsiiProxy_Report{}

	_jsii_.Create(
		"zap-cdk.Report",
		[]interface{}{options},
		&j,
	)

	return &j
}

// Creates an instance of Report.
//
// Example:
//   const reportConfig = new Report({
//     template: 'traditional-html',
//     theme: 'corporate',
//     reportDir: '/reports',
//     reportFile: '{{yyyy-MM-dd}}-ZAP-Report-[[site]]',
//     reportTitle: 'Weekly Security Report',
//     reportDescription: 'This is the weekly security report generated by ZAP.',
//     displayReport: true,
//     risks: ['high', 'medium'],
//     confidences: ['high', 'medium', 'low'],
//     sections: ['alertSummary', 'siteSummary', 'alertsByRisk'],
//     sites: ['https://example.com', 'https://another-example.com']
//   });
//
func NewReport_Override(r Report, options IReport) {
	_init_.Initialize()

	_jsii_.Create(
		"zap-cdk.Report",
		[]interface{}{options},
		r,
	)
}

func (j *jsiiProxy_Report)SetConfidences(val *[]*string) {
	_jsii_.Set(
		j,
		"confidences",
		val,
	)
}

func (j *jsiiProxy_Report)SetDisplayReport(val *bool) {
	_jsii_.Set(
		j,
		"displayReport",
		val,
	)
}

func (j *jsiiProxy_Report)SetReportDescription(val *string) {
	_jsii_.Set(
		j,
		"reportDescription",
		val,
	)
}

func (j *jsiiProxy_Report)SetReportDir(val *string) {
	_jsii_.Set(
		j,
		"reportDir",
		val,
	)
}

func (j *jsiiProxy_Report)SetReportFile(val *string) {
	_jsii_.Set(
		j,
		"reportFile",
		val,
	)
}

func (j *jsiiProxy_Report)SetReportTitle(val *string) {
	_jsii_.Set(
		j,
		"reportTitle",
		val,
	)
}

func (j *jsiiProxy_Report)SetRisks(val *[]*string) {
	_jsii_.Set(
		j,
		"risks",
		val,
	)
}

func (j *jsiiProxy_Report)SetSections(val *[]*string) {
	_jsii_.Set(
		j,
		"sections",
		val,
	)
}

func (j *jsiiProxy_Report)SetSites(val *[]*string) {
	_jsii_.Set(
		j,
		"sites",
		val,
	)
}

func (j *jsiiProxy_Report)SetTemplate(val *string) {
	_jsii_.Set(
		j,
		"template",
		val,
	)
}

func (j *jsiiProxy_Report)SetTheme(val *string) {
	_jsii_.Set(
		j,
		"theme",
		val,
	)
}

